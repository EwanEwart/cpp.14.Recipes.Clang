Recipe 6-4. Using Polymorphic Base Classes
==========================================

Problem
-------
You would like to write generic code
that works with pointers to base classes
and that still calls the proper methods in derived classes.

Solution
--------
The virtual keyword allows you to create methods
that can be overwritten by derived classes.

How It Works
------------
The virtual keyword tells the C++ compiler
that you would like a class  to contain a virtual method table, v-table.

A v-table contains lookups for methods
that allows the correct method to be called
for a given type
even if the object is being accessed
through a pointer to one of its parent classes.

Listing 6-6
shows a class hierarchy
that uses the virtual keyword
to specify
that a method should be included
in the class’s v-table.

Listing 6-6. Creating a Virtual Method

...

The Car and Motorcycle classes in Listing 6-6
derive from the Vehicle class.

The GetNumberOfWheels method
in the Vehicle class is listed as a virtual method.

This causes any calls to that method
through a pointer to be called through the v-table.

Listing 6-7 shows a full example
with a main function
that accesses objects through a Vehicle pointer.

The Car and Motorcycle classes in Listing 6-6
derive from the Vehicle class.

The GetNumberOfWheels
method in the Vehicle class is listed as a virtual method.

This causes any calls to that method through a pointer
to be called through the v-table.

Listing 6-7 shows a full example
with a main function
that accesses objects through a Vehicle pointer.

The main function defines a pointer to a Vehicle object
on its first line.

This pointer is then used in each of the cout statements
to access the GetNumberOfWheels method for the current object.

The Vehicle and Motorcycle objects
have the address of the Vehicle::GetNumberOfWheels method
in their v-tables;

therefore, both return 2 for their number of wheels.

The Car class overwrites the GetNumberOfWheels method.

This causes Car to replace the address of Vehicle::GetNumberOfWheels
in the lookup table
with the address of Car::GetNumberOfWheels.

As a result,
when the same Vehicle pointer
is assigned the address of myCar
and subsequently calls GetNumberOfWheels,
it calls the method
defined in the Car class
and not that defined in the Vehicle class.

Figure 6-4
shows the output
generated by the code in Listing 6-7,
where you can see that this is the case.

The override keyword is used
at the end of the GetNumberOfWheels method’s signature
in the Car class.

This keyword is a hint to the compiler
that you expect this method
to overwrite a virtual method
in the parent class.

The compiler will throw an error
if you enter the signature incorrectly
or if the signature of the method
you’re overwriting is changed later.

This feature is very useful,
and I recommend
that you use it
although the override keyword itself is optional.

