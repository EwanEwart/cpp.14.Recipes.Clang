Recipe 6-3. Hiding Methods in Derived Classes
=============================================
Problem
-------
You have a derived class
that needs behaviour in a method
that is different from the behaviour
provided by the parent class.

Solution
--------
C++ allows you to hide methods in parent classes
by defining a method
with the same signature
in the derived class.

How It Works
------------
You can hide a method in a parent class
by defining a method
with exactly the same signature in the base class.

This example shows
how derived classes can use explicit method hiding
to provide functionality
that differs from the parent class’s.

This is a key concept to understand
when you’re using inheritance,
because it’s the primary method employed
to differentiate hierarchies of class types.

Listing 6-5 contains
- a Vehicle class,
- a Car class, and
- a Motorcycle class.

The Vehicle class defines a method named GetNumberOfWheels
that returns 0.

The same method is defined in the Car class
and the Motorcycle class;

these versions of the method return 4 and 2, respectively.

Listing 6-5. Hiding Methods

...

The main function in Listing 6-5
calls the three different versions of GetNumberOfWheels
and returns the appropriate value for each.

You can see the output generated by this code in Figure 6-3

...

Accessing these methods directly through
- objects or
- pointers
to these class types
results in the correct output.

Note
----
Method hiding doesn’t work properly
when you’re using polymorphism.

Aaccessing a derived class
through a pointer to a base class
results in the method on the base class being called.

This is very rarely the behaviour you want.

See recipe 8-5 for the proper solution when using polymorphism
